"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeEnvTransformer = void 0;
const typescript_1 = __importDefault(require("typescript"));
const { hasOwnProperty } = Object.prototype;
/**
 * Create a transformer factory that replaces `process.env.[PARAM]`
 * expressions with string literals, using provided `env`.
 */
function createNodeEnvTransformer(env) {
    return (context) => {
        const { factory } = context;
        return (sourceFile) => typescript_1.default.visitEachChild(sourceFile, visitNodeEnv, context);
        function visitNodeEnv(node) {
            if (typescript_1.default.isPropertyAccessExpression(node) &&
                typescript_1.default.isPropertyAccessExpression(node.expression) &&
                node.expression.name.text === 'env' &&
                typescript_1.default.isIdentifier(node.expression.expression) &&
                node.expression.expression.text === 'process' &&
                hasOwnProperty.call(env, node.name.text)) {
                // do lookup inside the if, so we don't do it twice
                const valueForParam = env[node.name.text];
                if (valueForParam !== undefined) {
                    return factory.createStringLiteral(valueForParam);
                }
            }
            return typescript_1.default.visitEachChild(node, visitNodeEnv, context);
        }
    };
}
exports.createNodeEnvTransformer = createNodeEnvTransformer;
//# sourceMappingURL=node-env-transformer.js.map